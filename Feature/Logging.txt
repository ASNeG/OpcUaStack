


Integrate Log Category
======================

New Class LogCategory: (0.5)
- Contains function for a log category needed in class Log. In log term each component
  should have a log component.

New Class LogCategoryManager: (0.5)
- Manage log category entries in a list.
- The category with id 1 is used for messages with no categories

New Class LogCategoryEntry:(0.5)
- Log category data

New Class LogCategoryConfig: (1)
- Read log category configuration from configuration file

  Example Configration file: Log only messages from COMP1

  <Category>
    <Cat><Name>Default</Name><Log>Inactive<Log></Cat>
    <Cat><Name>NoCat</Name><Log>Inactive<Log></Cat>
    <Cat><Name>COMP1</Name><Log>Active<Log></Cat>
  <Category>

Add new functionality to logger: (1)
- Add new constructor in class Log with parameter category
- Add new parameter function with category parameter
- Handle category in class Log. Only messages with category state isActivated are logged.
- Log messages without a log category should be used a default log category configured
  in the configuration file. 

Init Log category in application: (0.5)
- Read configuration and create log category instance


Add application name into log message
=====================================

Read new configuration: (1)
- Set name of parameter to log (in each log interface?)

  Example: 

  <LogParameter>
    <Parameter>Timestamp</Parameter>
    <Parameter>ThreadId</Parameter>
    <Parameter>ApplicationName</Parameter>
  </LogParameter>

Expand class Log: (0.5)
- Add application name to log message. The application name will be read from 
  the configuration file (application name in endpoint configuration).
- Handle new log parameter configuration


Add new log interface to support log messages via a Log Daemon
===============================================================

Add Log Server Configuration section: (1)
- Add Log Server configuration section

  Example:
  <LogServer>
    <Address>127.0.0.1:1234</Address>
    <MessageBufferSize>10000000</MessageBufferSize>
    <MacPacketsPerSecond>1000</MaxPacketPerSecond>
  </LogServer>

Add Message Queue:
- Add message queue for buffering log message (3)

Add Log Interface: (2)
- Add new log interface 
- Write log message to message queue

Add pcap generator: (3)
- Generate pcap format 
- pcap format: (https://wiki.wireshark.org/Development/LibpcapFileFormat)
  
  * Global Header
  * Packet Header
  * Packet Data
  * Packet Header 
  * Packet Data
  * ...

  Global Header:
  typedef struct pcap_hdr_s {
        guint32 magic_number;   /* magic number */
        guint16 version_major;  /* major version number */
        guint16 version_minor;  /* minor version number */
        gint32  thiszone;       /* GMT to local correction */
        guint32 sigfigs;        /* accuracy of timestamps */
        guint32 snaplen;        /* max length of captured packets, in octets */
        guint32 network;        /* data link type */
  } pcap_hdr_t;

  Packet Data:
  typedef struct pcaprec_hdr_s {
        guint32 ts_sec;         /* timestamp seconds */
        guint32 ts_usec;        /* timestamp microseconds */
        guint32 incl_len;       /* number of octets of packet saved in file */
        guint32 orig_len;       /* actual length of packet */
  } pcaprec_hdr_t;

Add TCP Server: (3)
- Add TCP Server
- Allow a maximum of one connection
- If a client connects to the server, the server sends all existing
  messages in the message queue to the client in pcap format.
- To avoid peak loads, the maximum number of messages per second is 
  limited.

Add Log Server: (2)
- add log server into opc ua server
- add message queue into opc ua server
- add pcap generator into opc ua server

Add LUA script: (3)
- Preperation of the log messages for output by wireshark
  
  Example:
  wireshark -k -i TCP@127.0.0.1:1234 -X lua_script:opcualog.lua


Add interface to output log messages with a sentry server (Linux first)
=======================================================================

TBD
